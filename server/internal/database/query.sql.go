// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createImage = `-- name: CreateImage :one
insert into images (
    title, artist, background, data, thumbnail
) values (
    ?, ?, ?, ?, ?
)
returning id, title, artist, background, data, thumbnail
`

type CreateImageParams struct {
	Title      string
	Artist     sql.NullString
	Background int64
	Data       []byte
	Thumbnail  []byte
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage,
		arg.Title,
		arg.Artist,
		arg.Background,
		arg.Data,
		arg.Thumbnail,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Background,
		&i.Data,
		&i.Thumbnail,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
delete from images
where id = ?
`

func (q *Queries) DeleteImage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImage = `-- name: GetImage :one
select id, title, artist, background, data, thumbnail from images
where id = ? limit 1
`

func (q *Queries) GetImage(ctx context.Context, id int64) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Background,
		&i.Data,
		&i.Thumbnail,
	)
	return i, err
}

const getRandomImage = `-- name: GetRandomImage :one
select id, title, artist, background, data, thumbnail from images
order by random() limit 1
`

func (q *Queries) GetRandomImage(ctx context.Context) (Image, error) {
	row := q.db.QueryRowContext(ctx, getRandomImage)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Background,
		&i.Data,
		&i.Thumbnail,
	)
	return i, err
}

const listImages = `-- name: ListImages :many
select id, title, artist from images
order by artist
`

type ListImagesRow struct {
	ID     int64
	Title  string
	Artist sql.NullString
}

func (q *Queries) ListImages(ctx context.Context) ([]ListImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListImagesRow
	for rows.Next() {
		var i ListImagesRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Artist); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
